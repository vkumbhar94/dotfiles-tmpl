typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export ZSH="$HOME/.oh-my-zsh"
export ZSH_CUSTOM="$HOME/.ohmyzsh-custom"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
zstyle ':omz:update' frequency 1

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(aliases git golang gradle kube-ps1 kubectl zsh-autosuggestions zsh-syntax-highlighting)
source $ZSH/oh-my-zsh.sh
#plugins=(aliases aws brew docker git git-auto-fetch git-commit git-flow golang jenv kube-ps1 kubectl kubectx pre-commit skaffold sudo thefuck themes web-search zoxide zsh-autosuggestions zsh-interactive-cd zsh-syntax-highlighting)


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#source <(git-town completions zsh)

if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
  autoload -Uz compinit
  compinit
fi
source $ZSH_CUSTOM/themes/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $ZSH_CUSTOM/plugins/zsh-autosuggestions/

export PATH="${PATH}:${HOME}/.krew/bin"

autoload -U +X bashcompinit && bashcompinit

setlocaldevip() {
  local remove_mode=false
  local hostname=""

  # Parse args
  if [[ "$1" == "--remove" ]]; then
    remove_mode=true
    hostname="$2"
  else
    hostname="$1"
  fi

  if [[ -z "$hostname" ]]; then
    echo "‚ùå Usage: setlocaldevip [--remove] <hostname>"
    return 1
  fi

  if $remove_mode; then
    echo "üóëÔ∏è Removing entry for '$hostname' from /etc/hosts"

    if grep -qE "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[[:space:]]+$hostname\$" /etc/hosts; then
      sudo cp /etc/hosts /etc/hosts.bak
      sudo sed -E "/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[[:space:]]+$hostname\$/d" /etc/hosts > /tmp/hosts && sudo cp /tmp/hosts /etc/hosts
      echo "‚úÖ Removed '$hostname' entry from /etc/hosts"
    else
      echo "‚ÑπÔ∏è No entry found for '$hostname'"
    fi
    return
  fi

  # Normal mode ‚Äî add/update
  local ip
  ip=$(ifconfig en0 | awk '/inet / {print $2}' | head -n 1)

  if [[ -z "$ip" ]]; then
    echo "‚ùå Could not determine local IP from en0"
    return 1
  fi

  echo "‚ÑπÔ∏è Detected local IP: $ip"

  sudo cp /etc/hosts /etc/hosts.bak

  if grep -qE "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[[:space:]]+$hostname\$" /etc/hosts; then
    echo "üîÑ Updating existing entry for $hostname"
    sudo sed -E "s/^([0-9]{1,3}\.){3}[0-9]{1,3}[[:space:]]+$hostname\$/${ip} ${hostname}/" /etc/hosts > /tmp/hosts && sudo cp /tmp/hosts /etc/hosts
  else
    echo "‚ûï Adding new entry for $hostname"
    echo "${ip} ${hostname}" | sudo tee -a /etc/hosts > /dev/null
  fi

  echo "‚úÖ /etc/hosts updated for '${hostname}' with IP ${ip}."
}

source $ZSH/plugins/kube-ps1/kube-ps1.plugin.zsh
PS1='$(kube_ps1)'$PS1
source <(stern --completion=zsh)
eval "$(rbenv init -)"
alias npxcz="npx cz"

#alias lip="ifconfig | grep -A 8 en0: | grep \"inet \" | egrep \"\d+\.\d+\.\d+\.\d+ \" -o"
alias lip="ifconfig en0 | awk '/inet / {print $2}' | head -n 1"

## https://sourabhbajaj.com/mac-setup/iTerm/fzf.html

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}


# fh - search in your command history and execute selected command
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

alias tailf="tail -f"
eval "$(fzf --zsh)"
alias bcl="bc -l <<<"
eval "$(thefuck --alias)"
eval "$(thefuck --alias fk)"
eval "$(zoxide init zsh)"


#alias cd="z"
alias cat="bat"
alias ls="eza --color=always --long --git --no-filesize --icons=always --no-time --no-user --no-permissions"
alias lsf="eza --color=always --long --git --icons=always"

show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"

export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo \${}'"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
  esac
}

alias vi="nvim"
alias vim="nvim"

alias catp="cat --style plain"
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/bit bit
complete -C /usr/local/bin/bit bit

function gstls(){
  gst $1 -s | awk '{if ($1 == "M") print $2}'
}

alias kc="kubectx -c && kubens -c"

alias dddev="kubectl config set-context docker-desktop --namespace=development && kubectl config use-context docker-desktop"

alias skrndev="pkgx skaffold run --profile docker,no-deps --namespace=development"
alias skdbgndev="pkgx skaffold debug --profile docker,no-deps --namespace=development"
alias skdndev="pkgx skaffold delete --profile docker,no-deps --namespace=development"

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
export PATH="$HOME/.git-fuzzy/bin:$PATH"
alias "lg='lazygit'"

alias szrc="source ~/.zshrc"

#export PATH="/usr/local/opt/openssl@3.0/bin:$PATH"

#which testy-go || go install github.com/last-ent/testy-go@latest
## always at the end of the file
#curl --no-progress-meter -s -w "\n" https://api.quotable.io/random | jq '.content, .author' -C
alias quote="curl --no-progress-meter -s -w \"\n\" https://api.quotable.io/random | jq '.content, .author' -C"

export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"
jenv global corretto64-17.0.12

[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
#[[ -s "$HOME/.gvm/scripts/gvm.in" ]] && source "$HOME/.gvm/scripts/gvm.in"
# commented as --default is used to set default go version
gvm use go1.23.7 --default > /dev/null
source ~/workspace/lm.rc
source "$HOME/workspace/fzfgit.sh"
cheat () {
  curl cht.sh/v/dev
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

parse_git_identity() {
  local name=$(git config user.name 2>/dev/null)
  local email=$(git config user.email 2>/dev/null)
  [[ -n "$name" && -n "$email" ]] && echo "üîê Git user: $name <$email>"
}

eval "$(dev --shellcode)"  # https://github.com/pkgxdev/dev
which ezcron > /dev/null || go install github.com/rueyaa332266/ezcron@latest > /dev/null

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
# fpath=(/Users/vaibhav.kumbhar/.docker/completions $fpath)
fpath=(/Users/$(whoami)/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

. "$HOME/.local/bin/env"
alias editquotes="open -a TextEdit ~/.quotes.txt"
alias addquote="echo \"- \" >> ~/.quotes.txt && vi ~/.quotes.txt"


for file in ~/.rcfiles/**/*; do
  [[ -f "$file" ]] && source "$file"
done

[[ -f "$HOME/.configure_tools.sh" ]] && source "$HOME/.configure_tools.sh"
